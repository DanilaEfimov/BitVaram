The BitVaram functional model includes the following parts:

Global Definition
A key feature of the language is that you can define functions during the program’s runtime.
Global definitions are stored in environment.bv. The compiler uses these definitions. While the program runs, a special structure keeps track of functions defined at runtime. When the program calls a new global function, it looks it up in this structure. After the program finishes, new definitions are added to environment.bv. Overloading is not supported — if a function is already globally defined, it will be replaced permanently after the program ends. If two functions with the same name exist during execution, the one defined later is used.

There is also a way to "undefine" global functions.
As mentioned before, global definitions are stored in environment.bv. The compiler creates an output file in IR language that the virtual machine uses to start. When the program runs and sees an undefine directive, it checks the function definition. If there are two functions with the same name, the later one is used. If the function doesn’t exist, the directive is ignored.

The local definition mechanism works in the usual way.

For local undefinition, the same kind of structure is used that stores runtime global definitions. The difference is that when the program ends, functions defined locally are not saved.

Function Parameters
The way parameters are passed to functions is standard and simple.