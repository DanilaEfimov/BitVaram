The BitVaram program includes the following memory levels:

Register Memory.

Consists of three registers for buffering standard streams, a counter, and a flags register.

Standard Output Register:
By default, it is 1 byte in size and uses an ASCII-like code table. Output is done using reserved text commands. The register has two states: waiting and ready. In the ready state, the register contains a non-zero code available for output. In the waiting state, the register contains a special reserved value — a zero byte, which means output stops.

Standard Input Register:
By default, it is 1 byte in size and uses an ASCII-like code table. Input is performed using reserved text commands. The register has two states: waiting and ready. In the ready state, the register contains a non-zero code, the symbol is immediately output — the register switches to the waiting state. In the waiting state, the register contains a zero code, which is invalid for output.

Counter:
By default, it is 2 bytes in size and holds a non-negative number. It is modified using reserved text commands (for loop, see syntax.txt). Used for organizing loops.

Flags Register:
By language standard, it is 16 bits in size. Flags are set using reserved text commands (not all flags are available for manual change). It can be used for branching (if conditional operator, see syntax.txt) and error reporting.

Tape

Variables that are not involved in computations are stored on a hypothetically infinite tape — a byte vector. At runtime, memory for variables is allocated in an infinite loop manner (like operator_new() in C++), and the numbers of used cells and offsets are stored in a special structure. By default, the tape length is 1024 bytes.

Stack

Variables used during computations are stored in a special stack-oriented structure. By default, the stack size is 64 bytes. Variables declared inside function bodies have a limited lifetime. These variables are the only category under automatic control; for the others, explicit deallocation is required.

