#include <parser.h>

/*
 * Метод process отвечает за обработку входных выражений и выполнение синтаксического анализа.
 *
 * Параметры:
 *  - expressions: вектор выражений, каждое из которых представляет собой последовательность токенов.
 *                 Это исходные данные, полученные из лексера.
 *  - config: конфигурация парсера (например, настройки режима парсинга, флаги и т.д.).
 *
 * Основная логика:
 *  1. Итерация по всем выражениям.
 *  2. Определение типа текущего выражения (например, блок, условие, функция, переменная и т.д.).
 *  3. В зависимости от типа выражения, построение соответствующего AST-узла (statemate).
 *  4. Сохранение или обработка построенного AST-узла.
 *  5. В случае ошибок — генерация или логгирование сообщения об ошибке с указанием позиции.
 *
 * Особенности реализации:
 *  - Использование enum Statemate для различения видов конструкций.
 *  - Работа с контекстом и позицией для отслеживания текущего состояния парсера.
 *  - Поддержка вложенных блоков и рекурсивный разбор вложенных выражений.
 *  - Использование config для кастомизации поведения парсера.
 *
 * Важно:
 *  - Метод должен быть устойчив к ошибкам в исходных данных.
 *  - При необходимости — обеспечивать откат состояния или возврат ошибки.
 *  - Производить валидную и корректную структуру AST, подходящую для дальнейшей обработки.
 */